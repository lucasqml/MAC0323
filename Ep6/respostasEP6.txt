/*********************************************************************

  AO PREENCHER ESSE CABEÇALHO COM O MEU NOME E O MEU NÚMERO USP,
  DECLARO QUE SOU O ÚNICO AUTOR E RESPONSÁVEL POR ESSE PROGRAMA.
  TODAS AS PARTES ORIGINAIS DESSE EXERCÍCIO-PROGRAMA (EP) FORAM
  DESENVOLVIDAS E IMPLEMENTADAS POR MIM SEGUINDO AS INSTRUÇÕES DESSE
  EP E QUE PORTANTO NÃO CONSTITUEM PLÁGIO. DECLARO TAMBÉM QUE SOU
  RESPONSÁVEL POR TODAS AS CÓPIAS DESSE PROGRAMA E QUE EU NÃO
  DISTRIBUI OU FACILITEI A SUA DISTRIBUIÇÃO. ESTOU CIENTE DE QUE OS
  CASOS DE PLÁGIO SÃO PUNIDOS COM REPROVAÇÃO DIRETA NA DISCIPLINA.

  NOME: Lucas Quaresma Medina Lam
  NUSP: 11796399

  Referências: com a exceção de códigos fornecidos no enunciado e em
  aula, caso você tenha utilizado alguma referência, liste-as
  explicitamente para que seu programa não seja considerada plágio.

  Exemplo:

  - Meu programa é baseado no programa DoublyLinkedList.java em
    https://algs4.cs.princeton.edu/13stacks/DoublyLinkedList.java.html

*********************************************************************/

Resposta 1: O fato de para essa entrada em especifico o tempo de execução ser 
muito pior se justifica pois o valor calculado pela função de hash é o mesmo
para todas as 50000 strings dadas. E então, enquanto em árvores o tempo de 
inserção é algo logarítimico, para as tabelas de símbolos esse tempo é algo
linear, o que vai tendo muita diferença se os valores vão aumentando e tendo 
o mesmo valor hash. 
Em casos gerais, se conhecemos como a função de hash calcula, podemos mandar 
entradas tendenciosas para elas, em que mesmo diferentes chaves, tem o mesmo
valor calculado pela função hash. 

Reposta 2: Conseguimos simular e ter uma ideia do que ocorre  quando usamos 
tabelas de hashing com linear probing e a função de hashing universal, quando
rodamos o HashingProfile com as flags "* -2 -u .", para visualizar o histograma
e "* -2 -u", para observar os hits (interprete * como uma variavel, para podermos 
testar valores diferentes em cada entrada, para simular o comportamento final de
um linear probing). 
O que se é observado, é que a imagem da função tem poucos valores atingidos 
('hits' é um numero bem baixo), e esses valores estão muito proximos um dos outros,
fazendo com que os 'clusters' do linear probing fiquem muito grandes, e ao ter que
inserir um novo elemento, ele tem de passar por todo o cluster, e fazer todas as 
comparações antes de inseri-lo na nova posição, o que faz ter desempenho muito baixo.

Em outras entradas, é possivel observar o mesmo problema, como por exemplo utilizando
as seguintes execuções de 'MGenerator.java':

java-algs4 MGenerator 10000 20 ABC DEF 201905 | java-algs4 HashingProfile 15 -2 -u
java-algs4 MGenerator 10000 20 ABCD BBBB 201905 | java-algs4 HashingProfile 15 -2 -u
java-algs4 MGenerator 20000 20 ABC DEF 201905 | java-algs4 HashingProfile 16 -2 -u
java-algs4 MGenerator 20000 20 ABCD BBBB 201905 | java-algs4 HashingProfile 16 -2 -u 

e suas variações, aumentando ou diminuindo o primeiro parâmetro de 'MGenerator'.

